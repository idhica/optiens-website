---
import Layout from '../../layouts/Layout.astro';
import { createClient } from 'microcms-js-sdk';
import type { Solutions, MicroCMSListResponse } from '../../types/microcms.d.ts';

const client = createClient({
  serviceDomain: import.meta.env.MICROCMS_SERVICE_DOMAIN,
  apiKey: import.meta.env.MICROCMS_API_KEY,
});

// ★修正★: 型定義を追加
const { contents: solutions } = await client.get<MicroCMSListResponse<Solutions>>({
  endpoint: 'solutions',
  queries: { orders: '-publishedAt' } // 新しい順に並び替え
});
---
<Layout title="ソリューション | オプティエンス">
  <main>
    <section class="solutions-hero-section">
      <div class="container text-center">
        <h1>ソリューション</h1>
        <p>オプティエンスが提供するサービス一覧です。</p>
      </div>
    </section>

    <section class="solutions-list-section">
      <div class="container">
        {solutions && solutions.length > 0 ? (
          <div class="solutions-grid">
            {solutions.map((solution) => (
              <article class="solution-item">
                {solution.image && <img src={solution.image.url} alt={solution.solutionName} class="solution-thumbnail" />}
                <div class="solution-content">
                  <h2><a href={`/solutions/${solution.slug}`}>{solution.solutionName}</a></h2>
                  <div class="overview-text">
                    <div set:html={solution.overview} />
                  </div>
                  <a href={`/solutions/${solution.slug}`} class="btn-secondary">詳細を見る</a>
                </div>
              </article>
            ))}
          </div>
        ) : (
          <p class="text-center">現在、ソリューションは準備中です。</p>
        )}
      </div>
    </section>
  </main>
</Layout>

<style>
  .solutions-hero-section {
    background-color: #e6f7ff;
    padding: 60px 0;
    text-align: center;
  }
  .solutions-hero-section h1 {
    font-size: 2.2em;
    color: #2c3e50;
    margin-bottom: 10px;
  }
  .solutions-hero-section p {
    font-size: 1.1em;
    color: #555;
  }
  .solutions-list-section {
    padding: 60px 0;
  }
  .solutions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 40px;
  }
  .solution-item {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  .solution-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
  }
  .solution-thumbnail {
    width: 100%;
    height: 220px;
    object-fit: cover;
  }
  .solution-content {
    padding: 25px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }
  .solution-content h2 {
    font-size: 1.5em;
    color: #34495e;
    margin-bottom: 15px;
  }
  .solution-content h2 a {
    text-decoration: none;
    color: inherit;
  }
  .solution-content h2 a:hover {
    color: #007bff;
  }
  /* ★修正★: overview-text内のpタグに影響するスタイルを調整 */
  .overview-text :global(p) {
    font-size: 0.95em;
    line-height: 1.6;
    color: #555;
    margin-bottom: 20px;
    flex-grow: 1;
  }
  .btn-secondary {
    display: inline-block;
    background-color: #6c757d;
    color: #fff;
    padding: 10px 20px;
    border-radius: 5px;
    text-decoration: none;
    transition: background-color 0.3s ease;
    margin-top: auto;
  }
  .btn-secondary:hover {
    background-color: #5a6268;
  }
</style>